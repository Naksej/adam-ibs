/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bdgenomics.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FlatGenotype extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FlatGenotype\",\"namespace\":\"org.bdgenomics.formats.avro\",\"fields\":[{\"name\":\"referenceName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"position\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"referenceAllele\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"alleles\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"genotypeLikelihoods\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"default\":[]},{\"name\":\"alleleDepths\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"default\":[]},{\"name\":\"readDepth\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"genotypeQuality\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"sampleId\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence referenceName;
  @Deprecated public java.lang.Long position;
  @Deprecated public java.lang.CharSequence referenceAllele;
  @Deprecated public java.util.List<java.lang.CharSequence> alleles;
  @Deprecated public java.util.List<java.lang.Integer> genotypeLikelihoods;
  @Deprecated public java.util.List<java.lang.Integer> alleleDepths;
  @Deprecated public java.lang.Integer readDepth;
  @Deprecated public java.lang.Integer genotypeQuality;
  @Deprecated public java.lang.CharSequence sampleId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public FlatGenotype() {}

  /**
   * All-args constructor.
   */
  public FlatGenotype(java.lang.CharSequence referenceName, java.lang.Long position, java.lang.CharSequence referenceAllele, java.util.List<java.lang.CharSequence> alleles, java.util.List<java.lang.Integer> genotypeLikelihoods, java.util.List<java.lang.Integer> alleleDepths, java.lang.Integer readDepth, java.lang.Integer genotypeQuality, java.lang.CharSequence sampleId) {
    this.referenceName = referenceName;
    this.position = position;
    this.referenceAllele = referenceAllele;
    this.alleles = alleles;
    this.genotypeLikelihoods = genotypeLikelihoods;
    this.alleleDepths = alleleDepths;
    this.readDepth = readDepth;
    this.genotypeQuality = genotypeQuality;
    this.sampleId = sampleId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return referenceName;
    case 1: return position;
    case 2: return referenceAllele;
    case 3: return alleles;
    case 4: return genotypeLikelihoods;
    case 5: return alleleDepths;
    case 6: return readDepth;
    case 7: return genotypeQuality;
    case 8: return sampleId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: referenceName = (java.lang.CharSequence)value$; break;
    case 1: position = (java.lang.Long)value$; break;
    case 2: referenceAllele = (java.lang.CharSequence)value$; break;
    case 3: alleles = (java.util.List<java.lang.CharSequence>)value$; break;
    case 4: genotypeLikelihoods = (java.util.List<java.lang.Integer>)value$; break;
    case 5: alleleDepths = (java.util.List<java.lang.Integer>)value$; break;
    case 6: readDepth = (java.lang.Integer)value$; break;
    case 7: genotypeQuality = (java.lang.Integer)value$; break;
    case 8: sampleId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'referenceName' field.
   */
  public java.lang.CharSequence getReferenceName() {
    return referenceName;
  }

  /**
   * Sets the value of the 'referenceName' field.
   * @param value the value to set.
   */
  public void setReferenceName(java.lang.CharSequence value) {
    this.referenceName = value;
  }

  /**
   * Gets the value of the 'position' field.
   */
  public java.lang.Long getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(java.lang.Long value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'referenceAllele' field.
   */
  public java.lang.CharSequence getReferenceAllele() {
    return referenceAllele;
  }

  /**
   * Sets the value of the 'referenceAllele' field.
   * @param value the value to set.
   */
  public void setReferenceAllele(java.lang.CharSequence value) {
    this.referenceAllele = value;
  }

  /**
   * Gets the value of the 'alleles' field.
   */
  public java.util.List<java.lang.CharSequence> getAlleles() {
    return alleles;
  }

  /**
   * Sets the value of the 'alleles' field.
   * @param value the value to set.
   */
  public void setAlleles(java.util.List<java.lang.CharSequence> value) {
    this.alleles = value;
  }

  /**
   * Gets the value of the 'genotypeLikelihoods' field.
   */
  public java.util.List<java.lang.Integer> getGenotypeLikelihoods() {
    return genotypeLikelihoods;
  }

  /**
   * Sets the value of the 'genotypeLikelihoods' field.
   * @param value the value to set.
   */
  public void setGenotypeLikelihoods(java.util.List<java.lang.Integer> value) {
    this.genotypeLikelihoods = value;
  }

  /**
   * Gets the value of the 'alleleDepths' field.
   */
  public java.util.List<java.lang.Integer> getAlleleDepths() {
    return alleleDepths;
  }

  /**
   * Sets the value of the 'alleleDepths' field.
   * @param value the value to set.
   */
  public void setAlleleDepths(java.util.List<java.lang.Integer> value) {
    this.alleleDepths = value;
  }

  /**
   * Gets the value of the 'readDepth' field.
   */
  public java.lang.Integer getReadDepth() {
    return readDepth;
  }

  /**
   * Sets the value of the 'readDepth' field.
   * @param value the value to set.
   */
  public void setReadDepth(java.lang.Integer value) {
    this.readDepth = value;
  }

  /**
   * Gets the value of the 'genotypeQuality' field.
   */
  public java.lang.Integer getGenotypeQuality() {
    return genotypeQuality;
  }

  /**
   * Sets the value of the 'genotypeQuality' field.
   * @param value the value to set.
   */
  public void setGenotypeQuality(java.lang.Integer value) {
    this.genotypeQuality = value;
  }

  /**
   * Gets the value of the 'sampleId' field.
   */
  public java.lang.CharSequence getSampleId() {
    return sampleId;
  }

  /**
   * Sets the value of the 'sampleId' field.
   * @param value the value to set.
   */
  public void setSampleId(java.lang.CharSequence value) {
    this.sampleId = value;
  }

  /** Creates a new FlatGenotype RecordBuilder */
  public static org.bdgenomics.formats.avro.FlatGenotype.Builder newBuilder() {
    return new org.bdgenomics.formats.avro.FlatGenotype.Builder();
  }
  
  /** Creates a new FlatGenotype RecordBuilder by copying an existing Builder */
  public static org.bdgenomics.formats.avro.FlatGenotype.Builder newBuilder(org.bdgenomics.formats.avro.FlatGenotype.Builder other) {
    return new org.bdgenomics.formats.avro.FlatGenotype.Builder(other);
  }
  
  /** Creates a new FlatGenotype RecordBuilder by copying an existing FlatGenotype instance */
  public static org.bdgenomics.formats.avro.FlatGenotype.Builder newBuilder(org.bdgenomics.formats.avro.FlatGenotype other) {
    return new org.bdgenomics.formats.avro.FlatGenotype.Builder(other);
  }
  
  /**
   * RecordBuilder for FlatGenotype instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FlatGenotype>
    implements org.apache.avro.data.RecordBuilder<FlatGenotype> {

    private java.lang.CharSequence referenceName;
    private java.lang.Long position;
    private java.lang.CharSequence referenceAllele;
    private java.util.List<java.lang.CharSequence> alleles;
    private java.util.List<java.lang.Integer> genotypeLikelihoods;
    private java.util.List<java.lang.Integer> alleleDepths;
    private java.lang.Integer readDepth;
    private java.lang.Integer genotypeQuality;
    private java.lang.CharSequence sampleId;

    /** Creates a new Builder */
    private Builder() {
      super(org.bdgenomics.formats.avro.FlatGenotype.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bdgenomics.formats.avro.FlatGenotype.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.referenceName)) {
        this.referenceName = data().deepCopy(fields()[0].schema(), other.referenceName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceAllele)) {
        this.referenceAllele = data().deepCopy(fields()[2].schema(), other.referenceAllele);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alleles)) {
        this.alleles = data().deepCopy(fields()[3].schema(), other.alleles);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.genotypeLikelihoods)) {
        this.genotypeLikelihoods = data().deepCopy(fields()[4].schema(), other.genotypeLikelihoods);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.alleleDepths)) {
        this.alleleDepths = data().deepCopy(fields()[5].schema(), other.alleleDepths);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.readDepth)) {
        this.readDepth = data().deepCopy(fields()[6].schema(), other.readDepth);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.genotypeQuality)) {
        this.genotypeQuality = data().deepCopy(fields()[7].schema(), other.genotypeQuality);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sampleId)) {
        this.sampleId = data().deepCopy(fields()[8].schema(), other.sampleId);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FlatGenotype instance */
    private Builder(org.bdgenomics.formats.avro.FlatGenotype other) {
            super(org.bdgenomics.formats.avro.FlatGenotype.SCHEMA$);
      if (isValidValue(fields()[0], other.referenceName)) {
        this.referenceName = data().deepCopy(fields()[0].schema(), other.referenceName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceAllele)) {
        this.referenceAllele = data().deepCopy(fields()[2].schema(), other.referenceAllele);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alleles)) {
        this.alleles = data().deepCopy(fields()[3].schema(), other.alleles);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.genotypeLikelihoods)) {
        this.genotypeLikelihoods = data().deepCopy(fields()[4].schema(), other.genotypeLikelihoods);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.alleleDepths)) {
        this.alleleDepths = data().deepCopy(fields()[5].schema(), other.alleleDepths);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.readDepth)) {
        this.readDepth = data().deepCopy(fields()[6].schema(), other.readDepth);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.genotypeQuality)) {
        this.genotypeQuality = data().deepCopy(fields()[7].schema(), other.genotypeQuality);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sampleId)) {
        this.sampleId = data().deepCopy(fields()[8].schema(), other.sampleId);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'referenceName' field */
    public java.lang.CharSequence getReferenceName() {
      return referenceName;
    }
    
    /** Sets the value of the 'referenceName' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder setReferenceName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.referenceName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceName' field has been set */
    public boolean hasReferenceName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'referenceName' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder clearReferenceName() {
      referenceName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'position' field */
    public java.lang.Long getPosition() {
      return position;
    }
    
    /** Sets the value of the 'position' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder setPosition(java.lang.Long value) {
      validate(fields()[1], value);
      this.position = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'position' field has been set */
    public boolean hasPosition() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'position' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder clearPosition() {
      position = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'referenceAllele' field */
    public java.lang.CharSequence getReferenceAllele() {
      return referenceAllele;
    }
    
    /** Sets the value of the 'referenceAllele' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder setReferenceAllele(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.referenceAllele = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceAllele' field has been set */
    public boolean hasReferenceAllele() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'referenceAllele' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder clearReferenceAllele() {
      referenceAllele = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'alleles' field */
    public java.util.List<java.lang.CharSequence> getAlleles() {
      return alleles;
    }
    
    /** Sets the value of the 'alleles' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder setAlleles(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.alleles = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'alleles' field has been set */
    public boolean hasAlleles() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'alleles' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder clearAlleles() {
      alleles = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'genotypeLikelihoods' field */
    public java.util.List<java.lang.Integer> getGenotypeLikelihoods() {
      return genotypeLikelihoods;
    }
    
    /** Sets the value of the 'genotypeLikelihoods' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder setGenotypeLikelihoods(java.util.List<java.lang.Integer> value) {
      validate(fields()[4], value);
      this.genotypeLikelihoods = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'genotypeLikelihoods' field has been set */
    public boolean hasGenotypeLikelihoods() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'genotypeLikelihoods' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder clearGenotypeLikelihoods() {
      genotypeLikelihoods = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'alleleDepths' field */
    public java.util.List<java.lang.Integer> getAlleleDepths() {
      return alleleDepths;
    }
    
    /** Sets the value of the 'alleleDepths' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder setAlleleDepths(java.util.List<java.lang.Integer> value) {
      validate(fields()[5], value);
      this.alleleDepths = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'alleleDepths' field has been set */
    public boolean hasAlleleDepths() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'alleleDepths' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder clearAlleleDepths() {
      alleleDepths = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'readDepth' field */
    public java.lang.Integer getReadDepth() {
      return readDepth;
    }
    
    /** Sets the value of the 'readDepth' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder setReadDepth(java.lang.Integer value) {
      validate(fields()[6], value);
      this.readDepth = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'readDepth' field has been set */
    public boolean hasReadDepth() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'readDepth' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder clearReadDepth() {
      readDepth = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'genotypeQuality' field */
    public java.lang.Integer getGenotypeQuality() {
      return genotypeQuality;
    }
    
    /** Sets the value of the 'genotypeQuality' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder setGenotypeQuality(java.lang.Integer value) {
      validate(fields()[7], value);
      this.genotypeQuality = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'genotypeQuality' field has been set */
    public boolean hasGenotypeQuality() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'genotypeQuality' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder clearGenotypeQuality() {
      genotypeQuality = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'sampleId' field */
    public java.lang.CharSequence getSampleId() {
      return sampleId;
    }
    
    /** Sets the value of the 'sampleId' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder setSampleId(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.sampleId = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'sampleId' field has been set */
    public boolean hasSampleId() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'sampleId' field */
    public org.bdgenomics.formats.avro.FlatGenotype.Builder clearSampleId() {
      sampleId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public FlatGenotype build() {
      try {
        FlatGenotype record = new FlatGenotype();
        record.referenceName = fieldSetFlags()[0] ? this.referenceName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.position = fieldSetFlags()[1] ? this.position : (java.lang.Long) defaultValue(fields()[1]);
        record.referenceAllele = fieldSetFlags()[2] ? this.referenceAllele : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.alleles = fieldSetFlags()[3] ? this.alleles : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        record.genotypeLikelihoods = fieldSetFlags()[4] ? this.genotypeLikelihoods : (java.util.List<java.lang.Integer>) defaultValue(fields()[4]);
        record.alleleDepths = fieldSetFlags()[5] ? this.alleleDepths : (java.util.List<java.lang.Integer>) defaultValue(fields()[5]);
        record.readDepth = fieldSetFlags()[6] ? this.readDepth : (java.lang.Integer) defaultValue(fields()[6]);
        record.genotypeQuality = fieldSetFlags()[7] ? this.genotypeQuality : (java.lang.Integer) defaultValue(fields()[7]);
        record.sampleId = fieldSetFlags()[8] ? this.sampleId : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
