/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bdgenomics.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VariantCallingAnnotations extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VariantCallingAnnotations\",\"namespace\":\"org.bdgenomics.formats.avro\",\"fields\":[{\"name\":\"variantCallErrorProbability\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"variantIsPassing\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"variantFilters\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"readDepth\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"downsampled\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"baseQRankSum\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"clippingRankSum\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"fisherStrandBiasPValue\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"haplotypeScore\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"inbreedingCoefficient\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"rmsMapQ\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"mapq0Reads\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"mqRankSum\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"variantQualityByDepth\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"readPositionRankSum\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"genotypePriors\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"The Phred scaled prior probabilities of the various genotype states at this site.\\n   The number of elements in this array should be equal to the ploidy at this\\n   site, plus 1.\",\"default\":[]},{\"name\":\"genotypePosteriors\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"The Phred scaled posterior probabilities of the various genotype states at this site,\\n   in this sample. The number of elements in this array should be equal to the ploidy at\\n   this site, plus 1.\",\"default\":[]},{\"name\":\"vqslod\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"culprit\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"usedForNegativeTrainingSet\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"usedForPositiveTrainingSet\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"attributes\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"Additional feature info that doesn't fit into the standard fields above.\\n\\n   They are all encoded as (string, string) key-value pairs.\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Float variantCallErrorProbability;
  @Deprecated public java.lang.Boolean variantIsPassing;
  @Deprecated public java.util.List<java.lang.CharSequence> variantFilters;
  @Deprecated public java.lang.Integer readDepth;
  @Deprecated public java.lang.Boolean downsampled;
  @Deprecated public java.lang.Float baseQRankSum;
  @Deprecated public java.lang.Float clippingRankSum;
  @Deprecated public java.lang.Float fisherStrandBiasPValue;
  @Deprecated public java.lang.Float haplotypeScore;
  @Deprecated public java.lang.Float inbreedingCoefficient;
  @Deprecated public java.lang.Float rmsMapQ;
  @Deprecated public java.lang.Integer mapq0Reads;
  @Deprecated public java.lang.Float mqRankSum;
  @Deprecated public java.lang.Float variantQualityByDepth;
  @Deprecated public java.lang.Float readPositionRankSum;
  /** The Phred scaled prior probabilities of the various genotype states at this site.
   The number of elements in this array should be equal to the ploidy at this
   site, plus 1. */
  @Deprecated public java.util.List<java.lang.Integer> genotypePriors;
  /** The Phred scaled posterior probabilities of the various genotype states at this site,
   in this sample. The number of elements in this array should be equal to the ploidy at
   this site, plus 1. */
  @Deprecated public java.util.List<java.lang.Integer> genotypePosteriors;
  @Deprecated public java.lang.Float vqslod;
  @Deprecated public java.lang.CharSequence culprit;
  @Deprecated public java.lang.Boolean usedForNegativeTrainingSet;
  @Deprecated public java.lang.Boolean usedForPositiveTrainingSet;
  /** Additional feature info that doesn't fit into the standard fields above.

   They are all encoded as (string, string) key-value pairs. */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VariantCallingAnnotations() {}

  /**
   * All-args constructor.
   */
  public VariantCallingAnnotations(java.lang.Float variantCallErrorProbability, java.lang.Boolean variantIsPassing, java.util.List<java.lang.CharSequence> variantFilters, java.lang.Integer readDepth, java.lang.Boolean downsampled, java.lang.Float baseQRankSum, java.lang.Float clippingRankSum, java.lang.Float fisherStrandBiasPValue, java.lang.Float haplotypeScore, java.lang.Float inbreedingCoefficient, java.lang.Float rmsMapQ, java.lang.Integer mapq0Reads, java.lang.Float mqRankSum, java.lang.Float variantQualityByDepth, java.lang.Float readPositionRankSum, java.util.List<java.lang.Integer> genotypePriors, java.util.List<java.lang.Integer> genotypePosteriors, java.lang.Float vqslod, java.lang.CharSequence culprit, java.lang.Boolean usedForNegativeTrainingSet, java.lang.Boolean usedForPositiveTrainingSet, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes) {
    this.variantCallErrorProbability = variantCallErrorProbability;
    this.variantIsPassing = variantIsPassing;
    this.variantFilters = variantFilters;
    this.readDepth = readDepth;
    this.downsampled = downsampled;
    this.baseQRankSum = baseQRankSum;
    this.clippingRankSum = clippingRankSum;
    this.fisherStrandBiasPValue = fisherStrandBiasPValue;
    this.haplotypeScore = haplotypeScore;
    this.inbreedingCoefficient = inbreedingCoefficient;
    this.rmsMapQ = rmsMapQ;
    this.mapq0Reads = mapq0Reads;
    this.mqRankSum = mqRankSum;
    this.variantQualityByDepth = variantQualityByDepth;
    this.readPositionRankSum = readPositionRankSum;
    this.genotypePriors = genotypePriors;
    this.genotypePosteriors = genotypePosteriors;
    this.vqslod = vqslod;
    this.culprit = culprit;
    this.usedForNegativeTrainingSet = usedForNegativeTrainingSet;
    this.usedForPositiveTrainingSet = usedForPositiveTrainingSet;
    this.attributes = attributes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return variantCallErrorProbability;
    case 1: return variantIsPassing;
    case 2: return variantFilters;
    case 3: return readDepth;
    case 4: return downsampled;
    case 5: return baseQRankSum;
    case 6: return clippingRankSum;
    case 7: return fisherStrandBiasPValue;
    case 8: return haplotypeScore;
    case 9: return inbreedingCoefficient;
    case 10: return rmsMapQ;
    case 11: return mapq0Reads;
    case 12: return mqRankSum;
    case 13: return variantQualityByDepth;
    case 14: return readPositionRankSum;
    case 15: return genotypePriors;
    case 16: return genotypePosteriors;
    case 17: return vqslod;
    case 18: return culprit;
    case 19: return usedForNegativeTrainingSet;
    case 20: return usedForPositiveTrainingSet;
    case 21: return attributes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: variantCallErrorProbability = (java.lang.Float)value$; break;
    case 1: variantIsPassing = (java.lang.Boolean)value$; break;
    case 2: variantFilters = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: readDepth = (java.lang.Integer)value$; break;
    case 4: downsampled = (java.lang.Boolean)value$; break;
    case 5: baseQRankSum = (java.lang.Float)value$; break;
    case 6: clippingRankSum = (java.lang.Float)value$; break;
    case 7: fisherStrandBiasPValue = (java.lang.Float)value$; break;
    case 8: haplotypeScore = (java.lang.Float)value$; break;
    case 9: inbreedingCoefficient = (java.lang.Float)value$; break;
    case 10: rmsMapQ = (java.lang.Float)value$; break;
    case 11: mapq0Reads = (java.lang.Integer)value$; break;
    case 12: mqRankSum = (java.lang.Float)value$; break;
    case 13: variantQualityByDepth = (java.lang.Float)value$; break;
    case 14: readPositionRankSum = (java.lang.Float)value$; break;
    case 15: genotypePriors = (java.util.List<java.lang.Integer>)value$; break;
    case 16: genotypePosteriors = (java.util.List<java.lang.Integer>)value$; break;
    case 17: vqslod = (java.lang.Float)value$; break;
    case 18: culprit = (java.lang.CharSequence)value$; break;
    case 19: usedForNegativeTrainingSet = (java.lang.Boolean)value$; break;
    case 20: usedForPositiveTrainingSet = (java.lang.Boolean)value$; break;
    case 21: attributes = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'variantCallErrorProbability' field.
   */
  public java.lang.Float getVariantCallErrorProbability() {
    return variantCallErrorProbability;
  }

  /**
   * Sets the value of the 'variantCallErrorProbability' field.
   * @param value the value to set.
   */
  public void setVariantCallErrorProbability(java.lang.Float value) {
    this.variantCallErrorProbability = value;
  }

  /**
   * Gets the value of the 'variantIsPassing' field.
   */
  public java.lang.Boolean getVariantIsPassing() {
    return variantIsPassing;
  }

  /**
   * Sets the value of the 'variantIsPassing' field.
   * @param value the value to set.
   */
  public void setVariantIsPassing(java.lang.Boolean value) {
    this.variantIsPassing = value;
  }

  /**
   * Gets the value of the 'variantFilters' field.
   */
  public java.util.List<java.lang.CharSequence> getVariantFilters() {
    return variantFilters;
  }

  /**
   * Sets the value of the 'variantFilters' field.
   * @param value the value to set.
   */
  public void setVariantFilters(java.util.List<java.lang.CharSequence> value) {
    this.variantFilters = value;
  }

  /**
   * Gets the value of the 'readDepth' field.
   */
  public java.lang.Integer getReadDepth() {
    return readDepth;
  }

  /**
   * Sets the value of the 'readDepth' field.
   * @param value the value to set.
   */
  public void setReadDepth(java.lang.Integer value) {
    this.readDepth = value;
  }

  /**
   * Gets the value of the 'downsampled' field.
   */
  public java.lang.Boolean getDownsampled() {
    return downsampled;
  }

  /**
   * Sets the value of the 'downsampled' field.
   * @param value the value to set.
   */
  public void setDownsampled(java.lang.Boolean value) {
    this.downsampled = value;
  }

  /**
   * Gets the value of the 'baseQRankSum' field.
   */
  public java.lang.Float getBaseQRankSum() {
    return baseQRankSum;
  }

  /**
   * Sets the value of the 'baseQRankSum' field.
   * @param value the value to set.
   */
  public void setBaseQRankSum(java.lang.Float value) {
    this.baseQRankSum = value;
  }

  /**
   * Gets the value of the 'clippingRankSum' field.
   */
  public java.lang.Float getClippingRankSum() {
    return clippingRankSum;
  }

  /**
   * Sets the value of the 'clippingRankSum' field.
   * @param value the value to set.
   */
  public void setClippingRankSum(java.lang.Float value) {
    this.clippingRankSum = value;
  }

  /**
   * Gets the value of the 'fisherStrandBiasPValue' field.
   */
  public java.lang.Float getFisherStrandBiasPValue() {
    return fisherStrandBiasPValue;
  }

  /**
   * Sets the value of the 'fisherStrandBiasPValue' field.
   * @param value the value to set.
   */
  public void setFisherStrandBiasPValue(java.lang.Float value) {
    this.fisherStrandBiasPValue = value;
  }

  /**
   * Gets the value of the 'haplotypeScore' field.
   */
  public java.lang.Float getHaplotypeScore() {
    return haplotypeScore;
  }

  /**
   * Sets the value of the 'haplotypeScore' field.
   * @param value the value to set.
   */
  public void setHaplotypeScore(java.lang.Float value) {
    this.haplotypeScore = value;
  }

  /**
   * Gets the value of the 'inbreedingCoefficient' field.
   */
  public java.lang.Float getInbreedingCoefficient() {
    return inbreedingCoefficient;
  }

  /**
   * Sets the value of the 'inbreedingCoefficient' field.
   * @param value the value to set.
   */
  public void setInbreedingCoefficient(java.lang.Float value) {
    this.inbreedingCoefficient = value;
  }

  /**
   * Gets the value of the 'rmsMapQ' field.
   */
  public java.lang.Float getRmsMapQ() {
    return rmsMapQ;
  }

  /**
   * Sets the value of the 'rmsMapQ' field.
   * @param value the value to set.
   */
  public void setRmsMapQ(java.lang.Float value) {
    this.rmsMapQ = value;
  }

  /**
   * Gets the value of the 'mapq0Reads' field.
   */
  public java.lang.Integer getMapq0Reads() {
    return mapq0Reads;
  }

  /**
   * Sets the value of the 'mapq0Reads' field.
   * @param value the value to set.
   */
  public void setMapq0Reads(java.lang.Integer value) {
    this.mapq0Reads = value;
  }

  /**
   * Gets the value of the 'mqRankSum' field.
   */
  public java.lang.Float getMqRankSum() {
    return mqRankSum;
  }

  /**
   * Sets the value of the 'mqRankSum' field.
   * @param value the value to set.
   */
  public void setMqRankSum(java.lang.Float value) {
    this.mqRankSum = value;
  }

  /**
   * Gets the value of the 'variantQualityByDepth' field.
   */
  public java.lang.Float getVariantQualityByDepth() {
    return variantQualityByDepth;
  }

  /**
   * Sets the value of the 'variantQualityByDepth' field.
   * @param value the value to set.
   */
  public void setVariantQualityByDepth(java.lang.Float value) {
    this.variantQualityByDepth = value;
  }

  /**
   * Gets the value of the 'readPositionRankSum' field.
   */
  public java.lang.Float getReadPositionRankSum() {
    return readPositionRankSum;
  }

  /**
   * Sets the value of the 'readPositionRankSum' field.
   * @param value the value to set.
   */
  public void setReadPositionRankSum(java.lang.Float value) {
    this.readPositionRankSum = value;
  }

  /**
   * Gets the value of the 'genotypePriors' field.
   * The Phred scaled prior probabilities of the various genotype states at this site.
   The number of elements in this array should be equal to the ploidy at this
   site, plus 1.   */
  public java.util.List<java.lang.Integer> getGenotypePriors() {
    return genotypePriors;
  }

  /**
   * Sets the value of the 'genotypePriors' field.
   * The Phred scaled prior probabilities of the various genotype states at this site.
   The number of elements in this array should be equal to the ploidy at this
   site, plus 1.   * @param value the value to set.
   */
  public void setGenotypePriors(java.util.List<java.lang.Integer> value) {
    this.genotypePriors = value;
  }

  /**
   * Gets the value of the 'genotypePosteriors' field.
   * The Phred scaled posterior probabilities of the various genotype states at this site,
   in this sample. The number of elements in this array should be equal to the ploidy at
   this site, plus 1.   */
  public java.util.List<java.lang.Integer> getGenotypePosteriors() {
    return genotypePosteriors;
  }

  /**
   * Sets the value of the 'genotypePosteriors' field.
   * The Phred scaled posterior probabilities of the various genotype states at this site,
   in this sample. The number of elements in this array should be equal to the ploidy at
   this site, plus 1.   * @param value the value to set.
   */
  public void setGenotypePosteriors(java.util.List<java.lang.Integer> value) {
    this.genotypePosteriors = value;
  }

  /**
   * Gets the value of the 'vqslod' field.
   */
  public java.lang.Float getVqslod() {
    return vqslod;
  }

  /**
   * Sets the value of the 'vqslod' field.
   * @param value the value to set.
   */
  public void setVqslod(java.lang.Float value) {
    this.vqslod = value;
  }

  /**
   * Gets the value of the 'culprit' field.
   */
  public java.lang.CharSequence getCulprit() {
    return culprit;
  }

  /**
   * Sets the value of the 'culprit' field.
   * @param value the value to set.
   */
  public void setCulprit(java.lang.CharSequence value) {
    this.culprit = value;
  }

  /**
   * Gets the value of the 'usedForNegativeTrainingSet' field.
   */
  public java.lang.Boolean getUsedForNegativeTrainingSet() {
    return usedForNegativeTrainingSet;
  }

  /**
   * Sets the value of the 'usedForNegativeTrainingSet' field.
   * @param value the value to set.
   */
  public void setUsedForNegativeTrainingSet(java.lang.Boolean value) {
    this.usedForNegativeTrainingSet = value;
  }

  /**
   * Gets the value of the 'usedForPositiveTrainingSet' field.
   */
  public java.lang.Boolean getUsedForPositiveTrainingSet() {
    return usedForPositiveTrainingSet;
  }

  /**
   * Sets the value of the 'usedForPositiveTrainingSet' field.
   * @param value the value to set.
   */
  public void setUsedForPositiveTrainingSet(java.lang.Boolean value) {
    this.usedForPositiveTrainingSet = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   * Additional feature info that doesn't fit into the standard fields above.

   They are all encoded as (string, string) key-value pairs.   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
    return attributes;
  }

  /**
   * Sets the value of the 'attributes' field.
   * Additional feature info that doesn't fit into the standard fields above.

   They are all encoded as (string, string) key-value pairs.   * @param value the value to set.
   */
  public void setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.attributes = value;
  }

  /** Creates a new VariantCallingAnnotations RecordBuilder */
  public static org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder newBuilder() {
    return new org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder();
  }
  
  /** Creates a new VariantCallingAnnotations RecordBuilder by copying an existing Builder */
  public static org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder newBuilder(org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder other) {
    return new org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder(other);
  }
  
  /** Creates a new VariantCallingAnnotations RecordBuilder by copying an existing VariantCallingAnnotations instance */
  public static org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder newBuilder(org.bdgenomics.formats.avro.VariantCallingAnnotations other) {
    return new org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder(other);
  }
  
  /**
   * RecordBuilder for VariantCallingAnnotations instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VariantCallingAnnotations>
    implements org.apache.avro.data.RecordBuilder<VariantCallingAnnotations> {

    private java.lang.Float variantCallErrorProbability;
    private java.lang.Boolean variantIsPassing;
    private java.util.List<java.lang.CharSequence> variantFilters;
    private java.lang.Integer readDepth;
    private java.lang.Boolean downsampled;
    private java.lang.Float baseQRankSum;
    private java.lang.Float clippingRankSum;
    private java.lang.Float fisherStrandBiasPValue;
    private java.lang.Float haplotypeScore;
    private java.lang.Float inbreedingCoefficient;
    private java.lang.Float rmsMapQ;
    private java.lang.Integer mapq0Reads;
    private java.lang.Float mqRankSum;
    private java.lang.Float variantQualityByDepth;
    private java.lang.Float readPositionRankSum;
    private java.util.List<java.lang.Integer> genotypePriors;
    private java.util.List<java.lang.Integer> genotypePosteriors;
    private java.lang.Float vqslod;
    private java.lang.CharSequence culprit;
    private java.lang.Boolean usedForNegativeTrainingSet;
    private java.lang.Boolean usedForPositiveTrainingSet;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;

    /** Creates a new Builder */
    private Builder() {
      super(org.bdgenomics.formats.avro.VariantCallingAnnotations.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.variantCallErrorProbability)) {
        this.variantCallErrorProbability = data().deepCopy(fields()[0].schema(), other.variantCallErrorProbability);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.variantIsPassing)) {
        this.variantIsPassing = data().deepCopy(fields()[1].schema(), other.variantIsPassing);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.variantFilters)) {
        this.variantFilters = data().deepCopy(fields()[2].schema(), other.variantFilters);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.readDepth)) {
        this.readDepth = data().deepCopy(fields()[3].schema(), other.readDepth);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.downsampled)) {
        this.downsampled = data().deepCopy(fields()[4].schema(), other.downsampled);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.baseQRankSum)) {
        this.baseQRankSum = data().deepCopy(fields()[5].schema(), other.baseQRankSum);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clippingRankSum)) {
        this.clippingRankSum = data().deepCopy(fields()[6].schema(), other.clippingRankSum);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.fisherStrandBiasPValue)) {
        this.fisherStrandBiasPValue = data().deepCopy(fields()[7].schema(), other.fisherStrandBiasPValue);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.haplotypeScore)) {
        this.haplotypeScore = data().deepCopy(fields()[8].schema(), other.haplotypeScore);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.inbreedingCoefficient)) {
        this.inbreedingCoefficient = data().deepCopy(fields()[9].schema(), other.inbreedingCoefficient);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.rmsMapQ)) {
        this.rmsMapQ = data().deepCopy(fields()[10].schema(), other.rmsMapQ);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.mapq0Reads)) {
        this.mapq0Reads = data().deepCopy(fields()[11].schema(), other.mapq0Reads);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.mqRankSum)) {
        this.mqRankSum = data().deepCopy(fields()[12].schema(), other.mqRankSum);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.variantQualityByDepth)) {
        this.variantQualityByDepth = data().deepCopy(fields()[13].schema(), other.variantQualityByDepth);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.readPositionRankSum)) {
        this.readPositionRankSum = data().deepCopy(fields()[14].schema(), other.readPositionRankSum);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.genotypePriors)) {
        this.genotypePriors = data().deepCopy(fields()[15].schema(), other.genotypePriors);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.genotypePosteriors)) {
        this.genotypePosteriors = data().deepCopy(fields()[16].schema(), other.genotypePosteriors);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.vqslod)) {
        this.vqslod = data().deepCopy(fields()[17].schema(), other.vqslod);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.culprit)) {
        this.culprit = data().deepCopy(fields()[18].schema(), other.culprit);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.usedForNegativeTrainingSet)) {
        this.usedForNegativeTrainingSet = data().deepCopy(fields()[19].schema(), other.usedForNegativeTrainingSet);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.usedForPositiveTrainingSet)) {
        this.usedForPositiveTrainingSet = data().deepCopy(fields()[20].schema(), other.usedForPositiveTrainingSet);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.attributes)) {
        this.attributes = data().deepCopy(fields()[21].schema(), other.attributes);
        fieldSetFlags()[21] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VariantCallingAnnotations instance */
    private Builder(org.bdgenomics.formats.avro.VariantCallingAnnotations other) {
            super(org.bdgenomics.formats.avro.VariantCallingAnnotations.SCHEMA$);
      if (isValidValue(fields()[0], other.variantCallErrorProbability)) {
        this.variantCallErrorProbability = data().deepCopy(fields()[0].schema(), other.variantCallErrorProbability);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.variantIsPassing)) {
        this.variantIsPassing = data().deepCopy(fields()[1].schema(), other.variantIsPassing);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.variantFilters)) {
        this.variantFilters = data().deepCopy(fields()[2].schema(), other.variantFilters);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.readDepth)) {
        this.readDepth = data().deepCopy(fields()[3].schema(), other.readDepth);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.downsampled)) {
        this.downsampled = data().deepCopy(fields()[4].schema(), other.downsampled);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.baseQRankSum)) {
        this.baseQRankSum = data().deepCopy(fields()[5].schema(), other.baseQRankSum);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clippingRankSum)) {
        this.clippingRankSum = data().deepCopy(fields()[6].schema(), other.clippingRankSum);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.fisherStrandBiasPValue)) {
        this.fisherStrandBiasPValue = data().deepCopy(fields()[7].schema(), other.fisherStrandBiasPValue);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.haplotypeScore)) {
        this.haplotypeScore = data().deepCopy(fields()[8].schema(), other.haplotypeScore);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.inbreedingCoefficient)) {
        this.inbreedingCoefficient = data().deepCopy(fields()[9].schema(), other.inbreedingCoefficient);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.rmsMapQ)) {
        this.rmsMapQ = data().deepCopy(fields()[10].schema(), other.rmsMapQ);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.mapq0Reads)) {
        this.mapq0Reads = data().deepCopy(fields()[11].schema(), other.mapq0Reads);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.mqRankSum)) {
        this.mqRankSum = data().deepCopy(fields()[12].schema(), other.mqRankSum);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.variantQualityByDepth)) {
        this.variantQualityByDepth = data().deepCopy(fields()[13].schema(), other.variantQualityByDepth);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.readPositionRankSum)) {
        this.readPositionRankSum = data().deepCopy(fields()[14].schema(), other.readPositionRankSum);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.genotypePriors)) {
        this.genotypePriors = data().deepCopy(fields()[15].schema(), other.genotypePriors);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.genotypePosteriors)) {
        this.genotypePosteriors = data().deepCopy(fields()[16].schema(), other.genotypePosteriors);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.vqslod)) {
        this.vqslod = data().deepCopy(fields()[17].schema(), other.vqslod);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.culprit)) {
        this.culprit = data().deepCopy(fields()[18].schema(), other.culprit);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.usedForNegativeTrainingSet)) {
        this.usedForNegativeTrainingSet = data().deepCopy(fields()[19].schema(), other.usedForNegativeTrainingSet);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.usedForPositiveTrainingSet)) {
        this.usedForPositiveTrainingSet = data().deepCopy(fields()[20].schema(), other.usedForPositiveTrainingSet);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.attributes)) {
        this.attributes = data().deepCopy(fields()[21].schema(), other.attributes);
        fieldSetFlags()[21] = true;
      }
    }

    /** Gets the value of the 'variantCallErrorProbability' field */
    public java.lang.Float getVariantCallErrorProbability() {
      return variantCallErrorProbability;
    }
    
    /** Sets the value of the 'variantCallErrorProbability' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setVariantCallErrorProbability(java.lang.Float value) {
      validate(fields()[0], value);
      this.variantCallErrorProbability = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'variantCallErrorProbability' field has been set */
    public boolean hasVariantCallErrorProbability() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'variantCallErrorProbability' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearVariantCallErrorProbability() {
      variantCallErrorProbability = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'variantIsPassing' field */
    public java.lang.Boolean getVariantIsPassing() {
      return variantIsPassing;
    }
    
    /** Sets the value of the 'variantIsPassing' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setVariantIsPassing(java.lang.Boolean value) {
      validate(fields()[1], value);
      this.variantIsPassing = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'variantIsPassing' field has been set */
    public boolean hasVariantIsPassing() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'variantIsPassing' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearVariantIsPassing() {
      variantIsPassing = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'variantFilters' field */
    public java.util.List<java.lang.CharSequence> getVariantFilters() {
      return variantFilters;
    }
    
    /** Sets the value of the 'variantFilters' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setVariantFilters(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.variantFilters = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'variantFilters' field has been set */
    public boolean hasVariantFilters() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'variantFilters' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearVariantFilters() {
      variantFilters = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'readDepth' field */
    public java.lang.Integer getReadDepth() {
      return readDepth;
    }
    
    /** Sets the value of the 'readDepth' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setReadDepth(java.lang.Integer value) {
      validate(fields()[3], value);
      this.readDepth = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'readDepth' field has been set */
    public boolean hasReadDepth() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'readDepth' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearReadDepth() {
      readDepth = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'downsampled' field */
    public java.lang.Boolean getDownsampled() {
      return downsampled;
    }
    
    /** Sets the value of the 'downsampled' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setDownsampled(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.downsampled = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'downsampled' field has been set */
    public boolean hasDownsampled() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'downsampled' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearDownsampled() {
      downsampled = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'baseQRankSum' field */
    public java.lang.Float getBaseQRankSum() {
      return baseQRankSum;
    }
    
    /** Sets the value of the 'baseQRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setBaseQRankSum(java.lang.Float value) {
      validate(fields()[5], value);
      this.baseQRankSum = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'baseQRankSum' field has been set */
    public boolean hasBaseQRankSum() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'baseQRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearBaseQRankSum() {
      baseQRankSum = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'clippingRankSum' field */
    public java.lang.Float getClippingRankSum() {
      return clippingRankSum;
    }
    
    /** Sets the value of the 'clippingRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setClippingRankSum(java.lang.Float value) {
      validate(fields()[6], value);
      this.clippingRankSum = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'clippingRankSum' field has been set */
    public boolean hasClippingRankSum() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'clippingRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearClippingRankSum() {
      clippingRankSum = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'fisherStrandBiasPValue' field */
    public java.lang.Float getFisherStrandBiasPValue() {
      return fisherStrandBiasPValue;
    }
    
    /** Sets the value of the 'fisherStrandBiasPValue' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setFisherStrandBiasPValue(java.lang.Float value) {
      validate(fields()[7], value);
      this.fisherStrandBiasPValue = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'fisherStrandBiasPValue' field has been set */
    public boolean hasFisherStrandBiasPValue() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'fisherStrandBiasPValue' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearFisherStrandBiasPValue() {
      fisherStrandBiasPValue = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'haplotypeScore' field */
    public java.lang.Float getHaplotypeScore() {
      return haplotypeScore;
    }
    
    /** Sets the value of the 'haplotypeScore' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setHaplotypeScore(java.lang.Float value) {
      validate(fields()[8], value);
      this.haplotypeScore = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'haplotypeScore' field has been set */
    public boolean hasHaplotypeScore() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'haplotypeScore' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearHaplotypeScore() {
      haplotypeScore = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'inbreedingCoefficient' field */
    public java.lang.Float getInbreedingCoefficient() {
      return inbreedingCoefficient;
    }
    
    /** Sets the value of the 'inbreedingCoefficient' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setInbreedingCoefficient(java.lang.Float value) {
      validate(fields()[9], value);
      this.inbreedingCoefficient = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'inbreedingCoefficient' field has been set */
    public boolean hasInbreedingCoefficient() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'inbreedingCoefficient' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearInbreedingCoefficient() {
      inbreedingCoefficient = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'rmsMapQ' field */
    public java.lang.Float getRmsMapQ() {
      return rmsMapQ;
    }
    
    /** Sets the value of the 'rmsMapQ' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setRmsMapQ(java.lang.Float value) {
      validate(fields()[10], value);
      this.rmsMapQ = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'rmsMapQ' field has been set */
    public boolean hasRmsMapQ() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'rmsMapQ' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearRmsMapQ() {
      rmsMapQ = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'mapq0Reads' field */
    public java.lang.Integer getMapq0Reads() {
      return mapq0Reads;
    }
    
    /** Sets the value of the 'mapq0Reads' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setMapq0Reads(java.lang.Integer value) {
      validate(fields()[11], value);
      this.mapq0Reads = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'mapq0Reads' field has been set */
    public boolean hasMapq0Reads() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'mapq0Reads' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearMapq0Reads() {
      mapq0Reads = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'mqRankSum' field */
    public java.lang.Float getMqRankSum() {
      return mqRankSum;
    }
    
    /** Sets the value of the 'mqRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setMqRankSum(java.lang.Float value) {
      validate(fields()[12], value);
      this.mqRankSum = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'mqRankSum' field has been set */
    public boolean hasMqRankSum() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'mqRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearMqRankSum() {
      mqRankSum = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'variantQualityByDepth' field */
    public java.lang.Float getVariantQualityByDepth() {
      return variantQualityByDepth;
    }
    
    /** Sets the value of the 'variantQualityByDepth' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setVariantQualityByDepth(java.lang.Float value) {
      validate(fields()[13], value);
      this.variantQualityByDepth = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'variantQualityByDepth' field has been set */
    public boolean hasVariantQualityByDepth() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'variantQualityByDepth' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearVariantQualityByDepth() {
      variantQualityByDepth = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'readPositionRankSum' field */
    public java.lang.Float getReadPositionRankSum() {
      return readPositionRankSum;
    }
    
    /** Sets the value of the 'readPositionRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setReadPositionRankSum(java.lang.Float value) {
      validate(fields()[14], value);
      this.readPositionRankSum = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'readPositionRankSum' field has been set */
    public boolean hasReadPositionRankSum() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'readPositionRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearReadPositionRankSum() {
      readPositionRankSum = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'genotypePriors' field */
    public java.util.List<java.lang.Integer> getGenotypePriors() {
      return genotypePriors;
    }
    
    /** Sets the value of the 'genotypePriors' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setGenotypePriors(java.util.List<java.lang.Integer> value) {
      validate(fields()[15], value);
      this.genotypePriors = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'genotypePriors' field has been set */
    public boolean hasGenotypePriors() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'genotypePriors' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearGenotypePriors() {
      genotypePriors = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'genotypePosteriors' field */
    public java.util.List<java.lang.Integer> getGenotypePosteriors() {
      return genotypePosteriors;
    }
    
    /** Sets the value of the 'genotypePosteriors' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setGenotypePosteriors(java.util.List<java.lang.Integer> value) {
      validate(fields()[16], value);
      this.genotypePosteriors = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'genotypePosteriors' field has been set */
    public boolean hasGenotypePosteriors() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'genotypePosteriors' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearGenotypePosteriors() {
      genotypePosteriors = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'vqslod' field */
    public java.lang.Float getVqslod() {
      return vqslod;
    }
    
    /** Sets the value of the 'vqslod' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setVqslod(java.lang.Float value) {
      validate(fields()[17], value);
      this.vqslod = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'vqslod' field has been set */
    public boolean hasVqslod() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'vqslod' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearVqslod() {
      vqslod = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'culprit' field */
    public java.lang.CharSequence getCulprit() {
      return culprit;
    }
    
    /** Sets the value of the 'culprit' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setCulprit(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.culprit = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'culprit' field has been set */
    public boolean hasCulprit() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'culprit' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearCulprit() {
      culprit = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'usedForNegativeTrainingSet' field */
    public java.lang.Boolean getUsedForNegativeTrainingSet() {
      return usedForNegativeTrainingSet;
    }
    
    /** Sets the value of the 'usedForNegativeTrainingSet' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setUsedForNegativeTrainingSet(java.lang.Boolean value) {
      validate(fields()[19], value);
      this.usedForNegativeTrainingSet = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'usedForNegativeTrainingSet' field has been set */
    public boolean hasUsedForNegativeTrainingSet() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'usedForNegativeTrainingSet' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearUsedForNegativeTrainingSet() {
      usedForNegativeTrainingSet = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'usedForPositiveTrainingSet' field */
    public java.lang.Boolean getUsedForPositiveTrainingSet() {
      return usedForPositiveTrainingSet;
    }
    
    /** Sets the value of the 'usedForPositiveTrainingSet' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setUsedForPositiveTrainingSet(java.lang.Boolean value) {
      validate(fields()[20], value);
      this.usedForPositiveTrainingSet = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'usedForPositiveTrainingSet' field has been set */
    public boolean hasUsedForPositiveTrainingSet() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'usedForPositiveTrainingSet' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearUsedForPositiveTrainingSet() {
      usedForPositiveTrainingSet = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'attributes' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
      return attributes;
    }
    
    /** Sets the value of the 'attributes' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[21], value);
      this.attributes = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'attributes' field has been set */
    public boolean hasAttributes() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'attributes' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    @Override
    public VariantCallingAnnotations build() {
      try {
        VariantCallingAnnotations record = new VariantCallingAnnotations();
        record.variantCallErrorProbability = fieldSetFlags()[0] ? this.variantCallErrorProbability : (java.lang.Float) defaultValue(fields()[0]);
        record.variantIsPassing = fieldSetFlags()[1] ? this.variantIsPassing : (java.lang.Boolean) defaultValue(fields()[1]);
        record.variantFilters = fieldSetFlags()[2] ? this.variantFilters : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.readDepth = fieldSetFlags()[3] ? this.readDepth : (java.lang.Integer) defaultValue(fields()[3]);
        record.downsampled = fieldSetFlags()[4] ? this.downsampled : (java.lang.Boolean) defaultValue(fields()[4]);
        record.baseQRankSum = fieldSetFlags()[5] ? this.baseQRankSum : (java.lang.Float) defaultValue(fields()[5]);
        record.clippingRankSum = fieldSetFlags()[6] ? this.clippingRankSum : (java.lang.Float) defaultValue(fields()[6]);
        record.fisherStrandBiasPValue = fieldSetFlags()[7] ? this.fisherStrandBiasPValue : (java.lang.Float) defaultValue(fields()[7]);
        record.haplotypeScore = fieldSetFlags()[8] ? this.haplotypeScore : (java.lang.Float) defaultValue(fields()[8]);
        record.inbreedingCoefficient = fieldSetFlags()[9] ? this.inbreedingCoefficient : (java.lang.Float) defaultValue(fields()[9]);
        record.rmsMapQ = fieldSetFlags()[10] ? this.rmsMapQ : (java.lang.Float) defaultValue(fields()[10]);
        record.mapq0Reads = fieldSetFlags()[11] ? this.mapq0Reads : (java.lang.Integer) defaultValue(fields()[11]);
        record.mqRankSum = fieldSetFlags()[12] ? this.mqRankSum : (java.lang.Float) defaultValue(fields()[12]);
        record.variantQualityByDepth = fieldSetFlags()[13] ? this.variantQualityByDepth : (java.lang.Float) defaultValue(fields()[13]);
        record.readPositionRankSum = fieldSetFlags()[14] ? this.readPositionRankSum : (java.lang.Float) defaultValue(fields()[14]);
        record.genotypePriors = fieldSetFlags()[15] ? this.genotypePriors : (java.util.List<java.lang.Integer>) defaultValue(fields()[15]);
        record.genotypePosteriors = fieldSetFlags()[16] ? this.genotypePosteriors : (java.util.List<java.lang.Integer>) defaultValue(fields()[16]);
        record.vqslod = fieldSetFlags()[17] ? this.vqslod : (java.lang.Float) defaultValue(fields()[17]);
        record.culprit = fieldSetFlags()[18] ? this.culprit : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.usedForNegativeTrainingSet = fieldSetFlags()[19] ? this.usedForNegativeTrainingSet : (java.lang.Boolean) defaultValue(fields()[19]);
        record.usedForPositiveTrainingSet = fieldSetFlags()[20] ? this.usedForPositiveTrainingSet : (java.lang.Boolean) defaultValue(fields()[20]);
        record.attributes = fieldSetFlags()[21] ? this.attributes : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[21]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
